[["index.html", "Язык R для пользователей Excel Введение Предисловие О курсе Для кого этот курс Материалы к курсу Об авторе Программа курса Благодарности Ссылки", " Язык R для пользователей Excel Алексей Селезнёв 2022-08-12 Введение Предисловие В связи с карантином многие сейчас львиную долю времени проводят дома, и это время можно, и даже нужно провести с пользой. В начале карантина я решил довести до ума некоторые проекты начатые несколько месяцев назад. Одним из таких проектов был видео курс “Язык R для пользователей Excel”. Этим курсом я хотел снизить порог вхождения в R, и немного восполнить существующий дефицит обучающих материалов по данной теме на русском языке. Если всю работу с данными в компании, в котороый вы работаете принято по-прежнему вести в Excel, то предлагаю вам познакомится с более современным, и при этом совершенно бесплатным инструментом анализа данных. О курсе Курс построен вокруг архитектуры tidyverse, и входящих в неё пакетов: readr, vroom, dplyr, tidyr, ggplot2. Конечно в R есть и другие хорошие пакеты выполняющие подобные операции, например data.table, но синтаксис tidyverse интуитивно понятен, его легко читать даже неподготовленному пользователю, поэтому я думаю, что начинать обучение языку R лучше именно с tidyverse. Курс проведёт вас через все операции анализа данных, от загрузки до визуализации готового результата. Почему именно язык R, а не Python? Потому, что R функциональный язык, пользователям Excel на него перейти легче, т.к. не надо вникать в традиционное объектно-ориентированное программирование. К каждому из уроков предусмотрен тест. Тест состоит как из теоритических вопросов так и из задач на программирование. Решать тесты или нет лично ваш выбор, но они однозначно помогут вам закрепить полученный в видео лекциях материал. Если вы застряли на какой-то из практических задач можно подсмотреть её решение в разделе с решениями. Для кого этот курс Думаю это понятно из названия, тем не менее опишу более подробно. Курс ориентирован на тех, кто в работе активно использует Microsoft Excel и там же реализует всю работу с данными. В общем, если вы открываете приложение Microsoft Excel хотя бы раз в неделю то курс вам подойдёт. Навыков программирования для прохождения курса от вас не требуется, т.к. курс ориентирован на начинающих. Но, возможно начиная с 4 урока найдётся материал интересный и для активных пользователей R, т.к. основной функционал таких пакетов как dplyr и tidyr будет рассмотрен достаточно подробно. Материалы к курсу В каждом уроке есть ссылка на папку с материалами, и на каждый отдельный файл, так же в каждом из уроков вы найдёте пример рассмотренного в лекции кода. Но, при желании вы можете скачать все материалы курса одним архивом. Об авторе Меня зовут Алексей Селезнёв, с 2008 года я являюсь практикующим аналитиком. На данный момент основной моей деятельностью является развитие отдела аналитики в агентстве интернет-маркетинга Netpeak. Мною были разработаны такие R пакеты как: ryandexdirect, rfacebookstat, timeperiodsR, rvkstat и некоторые другие. Также я являюсь автором курса “Язык R для интернет-маркетинга”. Веду свой авторский Telegram и YouTube канал R4marketing. Буду рад видеть вас в рядах подписчиков. Периодически публикую статью на различных интернет медиа, зачастую это Хабр и Netpeak Journal. Неоднократно выступал на профильных конференциях по аналитике и интернет маркетингу, среди которых Матемаркетинг, GoAnalytics, Analyze, eCommerce, 8P и прочие. Начиная с 2016 года всячески стараюсь популяризировать язык R среди русскоязычных аналитиков и маркетологов. Этот курс также был создан с этой целью. Программа курса Установка R и RStudio Структуры данных в R Загрузка данных в R Фильтрация строк, выбор и переименование столбцов, пайплайны Добавление вычисляемых столбцов в таблицы Группировка и агрегация данных Вертикальное и горизонтальное объединение таблиц Оконные функции в R Вращение таблиц или аналог сводных таблиц R Загрузка данных из JSON файлов в R и преобразование списков в таблицы Простейшая визуализация данных, пакет ggplot2 и функция qplot() Построение графиков в R слой за слоем с помощью ggplot2 Изменение элементов графиков и применение готовых тем в ggplot2 Благодарности Курс, и все сопутствующие материалы предоставляются бесплатно, но если у вас есть желание отблагодарить автора за этот видео курс вы можете перечислить любую произвольную сумму на этой странице. Либо с помощью кнопки: Оплатить Ссылки Статья о курсе на Хабре Статья о курсе на proglib Плейлист курса на YouTube "],["устновка-r-и-rstudio.html", "Урок 1 Устновка R и RStudio 1.1 Описание 1.2 Видео 1.3 Тест", " Урок 1 Устновка R и RStudio 1.1 Описание В этом уроке мы с вами установим необходимое програмное обеспечение: Язык R (Windows) Язык R (MacOS) Среду разработки RStudio 1.2 Видео 1.3 Тест "],["основные-структуры-данных-в-r-и-установка-и-подключение-пакетов.html", "Урок 2 Основные структуры данных в R и установка и подключение пакетов 2.1 Описание 2.2 Видео 2.3 Материалы 2.4 Код 2.5 Тест", " Урок 2 Основные структуры данных в R и установка и подключение пакетов 2.1 Описание В этом уроке мы разберём основные структуры данных в языке программирования R и сравним их с Excel. Структуры данных рассмотренные в уроке: 1. Векторы 2. Таблицы (дата фреймы) 3. Списки 2.2 Видео 2.3 Материалы Все материалы к данному уроку можно найти по ссылке. 2.4 Код # переменная x &lt;- 1 # вектор y &lt;- 1:10 typeof(y) strings &lt;- c(&quot;string&quot;, &quot;vector&quot;) typeof(strings) vec &lt;- c(3, &quot;string&quot;) typeof(vec) # обраение к элементу вектора strings[1] strings[2] y[3:6] y[c(2, 5, 9)] # таблица, data frame df1 &lt;- data.frame(a = 1:3, b = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)) # обратиться к определённому столбцу таблицы df1$a df1[&#39;a&#39;] # списки typeof(df1) class(df1) list1 &lt;- list(y, strings, vec, df1) list2 &lt;- list(node1 = c(1, 5, 8), node2 = list(&quot;y&quot;, 3, &quot;p&quot;)) # структура объекта str(df1) str(list2) str(vec) 2.5 Тест "],["чтение-данных-из-tsv-csv-excel-файлов-и-google-таблиц.html", "Урок 3 Чтение данных из TSV, CSV, Excel файлов и Google Таблиц 3.1 Описание 3.2 Видео 3.3 Материалы 3.4 Код 3.5 Тест", " Урок 3 Чтение данных из TSV, CSV, Excel файлов и Google Таблиц 3.1 Описание В этом уроке мы разберёмся как загружать данные для дальнейшей обработки на языке R. Мы загрузим данные из csv, tsv, Excel файлов и Google Таблиц. Разберёмся с такими R пакетами как: vroom, readxl, googlesheets4 3.2 Видео 3.3 Материалы Все материалы к данному уроку можно найти по ссылке. ga_december.csv ga_nowember.csv ga_examples.xlsx 3.4 Код # Загрузка данных в R # Установка пакетов install.packages(&quot;vroom&quot;) install.packages(&quot;readxl&quot;) install.packages(&quot;devtools&quot;) devtools::install_github(&quot;tidyverse/googlesheets4&quot;) # ########################################### # подключение пакетов library(&quot;vroom&quot;) # ########################################### # Чтение CSV, TSV и прочих текстовых файлов ## чтение локальных файлов ga_data &lt;- vroom(file = &quot;D:/materials/lesson_3/ga_nowember.csv&quot;, delim = &quot;/t&quot;) ## чтение файлов опубликованных в интернете ga_data_i &lt;- vroom(&quot;https://raw.githubusercontent.com/selesnow/publications/master/data_example/russian_text_in_r/ga_nowember.csv&quot;) ## чтение нескольких файлов в одну таблицу files &lt;- dir(pattern = &quot;\\\\.csv$&quot;) ga_full &lt;- vroom(files) # ########################################### # Чтение Excel файлов library(readxl) ## получить список листов из Excel файла excel_sheets(&quot;D:/materials/lesson_3/ga_examples.xlsx&quot;) ## считать данные с листа xl_dec &lt;- read_excel(&quot;D:/materials/lesson_3/ga_examples.xlsx&quot;, sheet = &quot;dec&quot;) # ########################################### # Чтение Google Таблиц library(googlesheets4) ## Авторихация sheets_auth(email = &quot;selesnow@gmail.com&quot;) sheets_find() ## Подклбчение к доксу ss_id &lt;- as_sheets_id(&quot;1xu_beKZVpJJTHTvAab_vN3ZiMB03BytKArGjJUO8cck&quot;) ## открыть докс в браузере sheets_browse(ss) ## посмотреть список листов sheets_sheet_names(ss) ## получить данные из листа gs_ga_data &lt;- sheets_read(ss = ss_id, sheet = &quot;dec&quot;) ## получить данные из диапазона на листе gs_ga_data &lt;- sheets_read(ss = ss, sheet = &quot;dec&quot;, range = &quot;A1:C10&quot;) 3.5 Тест "],["пакет-dplyr-фильтрация-по-строкам-продвинутый-выбор-столбцов-переименование-столбцов-пайплайны.html", "Урок 4 Пакет dplyr: Фильтрация по строкам, продвинутый выбор столбцов, переименование столбцов, пайплайны 4.1 Описание 4.2 Видео 4.3 Материалы 4.4 Код 4.5 Тест", " Урок 4 Пакет dplyr: Фильтрация по строкам, продвинутый выбор столбцов, переименование столбцов, пайплайны 4.1 Описание Этот урок посвящён пакету dplyr. В нём мы разберёмся как фильтровать датафреймы, выбирать нужные столбцы и переименовывать их. Также узнаем что такое пайпланы и как они помогают делать ваш код на языке R более читаемым. 4.2 Видео 4.3 Материалы Все материалы к данному уроку можно найти по ссылке. 4.4 Код # установка пакетов install.packages(&quot;dplyr&quot;) # подключение пакетов library(vroom) library(dplyr) # загрузка данных ga_data &lt;- vroom(&quot;https://raw.githubusercontent.com/selesnow/publications/master/code_example/from_excel_to_r/lesson_3/ga_nowember.csv&quot;) # ###################################################### # фильтраци¤ строк ## простейший фильтр с одним условием ga_data_organic &lt;- filter(ga_data, medium == &quot;organic&quot;) ## несколько условий ga_data_organic_10 &lt;- filter(ga_data, medium == &quot;organic&quot; &amp; sessions &gt; 10 ) ## провер¤ем на соответвию значению из списка google_yandex &lt;- filter(ga_data, source %in% c(&quot;google&quot;, &quot;yandex&quot;, &quot;bing&quot;)) ## создаЄм вектор дл¤ фильтрации search_eng &lt;- c(&quot;google&quot;, &quot;yandex&quot;, &quot;bing&quot;) ## используем вектор дл¤ фильтрации not_searcj_eng &lt;- filter(ga_data, ! source %in% search_eng) # ###################################################### # выбор столбцов ## простой выбор столбцов по названи¤м ga_data_с1 &lt;- select(ga_data, date, sessions) ## срез по столбцам ga_data_с2 &lt;- select(ga_data, source:sessions) ## получить столбцы по названию использу¤ регул¤рные выражени¤ match_s &lt;- select_at(ga_data, vars(matches(&quot;s&quot;))) # содержит s match_s2 &lt;- select_at(ga_data, vars(contains(&quot;s&quot;))) # содержит s last_s1 &lt;- select_at(ga_data, vars(matches(&quot;s$&quot;))) # заканчиваетс¤ на s last_s2 &lt;- select_at(ga_data, vars(ends_with(&quot;s&quot;))) # заканчиваетс¤ на s start_s1 &lt;- select_at(ga_data, vars(matches(&quot;^s&quot;))) # начинаетс¤ на s start_s2 &lt;- select_at(ga_data, vars(starts_with(&quot;s&quot;))) # начинаетс¤ на s ## выбрать только числовые столбцы ga_num_column &lt;- select_if(ga_data, is.numeric) ga_str_column &lt;- select_if(ga_data, is.character) ## шпаргалка # select - выбор столбцов по названию # select_at - выбор по названию с попощью доп операторов и регул¤рных выражений # select_if - выбор по типу пол¤, например все строковые или все числовые пол¤ # ###################################################### # переименовываем столбцы new_ga_data &lt;- rename(ga_data, channel = medium, refferer = source) # мен¤ем стиль имЄн столбцов rename_if(ga_data, is.numeric, paste0, &quot;_n&quot;) rename_at(ga_data, vars(matches(&quot;^s&quot;)), paste0, &quot;_s&quot;) rename_all(ga_data, toupper) # ###################################################### # пайплайны ## вложенные функции (как в Excel) rename_all(select_if(filter(ga_data, source %in% search_eng), is.numeric), toupper) ## тоже самое но через пайплайн %&gt;% result &lt;- ga_data %&gt;% filter(source %in% search_eng) %&gt;% select_if(is.numeric) %&gt;% rename_all(toupper) 4.5 Тест "],["пакет-dplyr-добавление-новых-вычисляемых-столбцов-mutate-mutate_if-mutate_at-mutate_all.html", "Урок 5 Пакет dplyr: Добавление новых вычисляемых столбцов, mutate, mutate_if, mutate_at, mutate_all 5.1 Описание 5.2 Видео 5.3 Материалы 5.4 Код 5.5 Тест", " Урок 5 Пакет dplyr: Добавление новых вычисляемых столбцов, mutate, mutate_if, mutate_at, mutate_all 5.1 Описание В этом видео мы продолжаем знакомство с библиотекой tidyverse и пакетом dplyr. Мы разберём семейство функций mutate(), и научимся с их помощью добавлять в таблицу новые вычисляемые столбцы. 5.2 Видео 5.3 Материалы Все материалы к данному уроку можно найти по ссылке. 5.4 Код # подключение пакетов library(vroom) library(dplyr) # загрузка данных ga_data &lt;- vroom(&quot;https://raw.githubusercontent.com/selesnow/publications/master/code_example/from_excel_to_r/lesson_3/ga_nowember.csv&quot;) # mutate # добавл¤ем новый столбец ga_data &lt;- mutate(ga_data, bounce_rate = bounces / sessions) ga_data &lt;- mutate(ga_data, bounce_rate = bounces / sessions, br_group = if_else(bounce_rate &gt; 0.6, &quot;high_br&quot;, &quot;normal_br&quot;)) # примен¤ем преобразование к уже существующим столбцам ga_data %&gt;% mutate_if(is.character, toupper) # преобразуем значени¤ существующих столбцов примен¤¤ регул¤рные выражени¤ ga_data %&gt;% mutate_at(vars(matches(&quot;s$&quot;)), sqrt ) # transemute # убираем все столбцы кроме преобразованных transmute(ga_data, bounce_rate = bounces / sessions, date = format(date, &quot;%d %B %Y&quot;), source) # преобразовываем столбцы по их признаку и удал¤ем все остальные transmute_if(ga_data, is.character, toupper) 5.5 Тест "],["пакет-dplyr-группировка-и-агрегация-данных-group_by-summarise.html", "Урок 6 Пакет dplyr: Группировка и агрегация данных, group_by, summarise 6.1 Описание 6.2 Видео 6.3 Материалы 6.4 Код 6.5 Тест", " Урок 6 Пакет dplyr: Группировка и агрегация данных, group_by, summarise 6.1 Описание В этом видео мы разберём одну из основных операций анализа данных, группировку и агрегацию. В ходе урока мы будем использовать пакет dplyr из библиотеки tidyverse и функции group_by() и summarise(). Мы рассмотрим всё семейство функций summarise(), т.е. summarise(), summarise_if() и summarise_at(). Список основных агрегирующих функций: sum - суммирование mean - среднее арифметическое min - минимальное max - максимальное median - медиана length - количество 6.2 Видео 6.3 Материалы Все материалы к данному уроку можно найти по ссылке. 6.4 Код # подключение пакетов library(vroom) library(dplyr) # загрузка данных ga_data &lt;- vroom(&quot;https://raw.githubusercontent.com/selesnow/publications/master/code_example/from_excel_to_r/lesson_3/ga_nowember.csv&quot;) # сгруппировать данные по дням ga_data %&gt;% group_by(date) %&gt;% summarise(sessions = sum(sessions), bounces = sum(bounces)) # другой вариант ga_data %&gt;% group_by(date) %&gt;% summarise_at(c(&quot;sessions&quot;, &quot;bounces&quot;), sum) # группировка по двум полям ga_data %&gt;% group_by(date, medium) %&gt;% summarise_at(c(&quot;sessions&quot;, &quot;bounces&quot;), sum) ga_data %&gt;% group_by(date, medium) %&gt;% summarise(ses = sum(sessions), bounc = sum(bounces)) # сумма по всем числовым столбцам ga_data %&gt;% group_by(medium) %&gt;% summarise_if(is.numeric, mean) # среднесуточное количество сеансов по каналам ndays &lt;- unique( ga_data$date ) %&gt;% length ga_data %&gt;% group_by(medium) %&gt;% summarise(daily_sessions = sum(sessions) / ndays) # применяем сразу несколько агрегирующий функций # сумма по всем числовым столбцам result &lt;- ga_data %&gt;% group_by(medium) %&gt;% summarise_if(is.numeric, list( avg = mean, med = median, sum = sum, count = length, min = min, max = max)) 6.5 Тест "],["пакет-dplyr-вертикальное-и-горизонтальное-объединение-таблиц-join-bind.html", "Урок 7 Пакет dplyr: Вертикальное и горизонтальное объединение таблиц, join, bind 7.1 Описание 7.2 Видео 7.3 Материалы 7.4 Код 7.5 Тест", " Урок 7 Пакет dplyr: Вертикальное и горизонтальное объединение таблиц, join, bind 7.1 Описание Этот урок поможет вам разобраться с операциями вертикального и горизонтального объединения таблиц. Вертикальное объединение является аналогом операции UNION в языке запросов SQL. Горизонтальное объединение пользователям Excel более известно благодаря функции ВПР, в SQL такие операции осуществляются операцией JOIN. В ходе урока мы решим практическую задачу, в ходе которой будем использовать пакеты dplyr, readxl, tidyr и stringr. Основные функции которые мы рассмотрим: bind_rows - вертикальное объединение таблиц left_join - горизонтальное объединение таблиц semi_join - включающее объединение таблиц anti_join - исключающее объединение таблиц 7.2 Видео 7.3 Материалы Все материалы к данному уроку можно найти по ссылке. salary.xlsx 7.4 Код library(readxl) library(dplyr) library(tidyr) library(stringr) ### # Задача: собрать таблицу с бонусами и ставками за 2 месяца ### # скачиваем файл из интернета download.file(&quot;https://github.com/selesnow/publications/blob/master/code_example/from_excel_to_r/lesson_7/salary.xlsx?raw=true&quot;, destfile = &quot;salary.xlsx&quot;, mode = &quot;wb&quot;) # считываем листы sheets &lt;- excel_sheets(&quot;salary.xlsx&quot;) # считываем книгу excel_book &lt;- sapply( sheets, read_excel, path = &quot;salary.xlsx&quot; ) # смотрим объект str(excel_book) # смотрим содержание листа staff excel_book[[&#39;staff&#39;]] # ####### # ВЕРТИКАЛЬНОЕ ОБЪЕДИНЕНИЕ ТАБЛИЦ # создаём две отдельные таблицы со ствками # ####### staff_jan &lt;- mutate(excel_book[[&#39;staff&#39;]], month = &quot;2020.01&quot;) staff_feb &lt;- mutate(excel_book[[&#39;staff&#39;]], month = &quot;2020.02&quot;) # объединяем таблицы staff_salary &lt;- bind_rows( staff_jan, staff_feb ) # объединяем бонусы staff_bonuses &lt;- bind_rows(excel_book[[&quot;bonus_jan&quot;]], excel_book[[&quot;bonus_feb&quot;]]) %&gt;% mutate(month = format(date, &quot;%Y.%m&quot;)) %&gt;% group_by(employee_id, month) %&gt;% summarise_at(&quot;bonus&quot;, sum) # объединяем штрафы staff_payroll &lt;- bind_rows(excel_book[[&quot;payroll_jan&quot;]], excel_book[[&quot;payroll_feb&quot;]]) %&gt;% mutate(month = format(date, &quot;%Y.%m&quot;)) %&gt;% group_by(employee_id, month) %&gt;% summarise_at(&quot;sum&quot;, sum) # ####### # ГОРИЗОНТАЛЬНОЕ ОБЪЕДИНЕНИЕ ТАБЛИЦ # ####### salary_analysis &lt;- left_join(staff_salary, staff_bonuses, by = c(&quot;id&quot; = &quot;employee_id&quot;, &quot;month&quot;)) %&gt;% left_join(staff_payroll, by = c(&quot;id&quot; = &quot;employee_id&quot;, &quot;month&quot;)) %&gt;% rename(payroll = sum) %&gt;% mutate_at(c(&quot;bonus&quot;, &quot;payroll&quot;), replace_na, 0) %&gt;% mutate(total = rate + bonus - payroll) # добавим данные об отделе salary_analysis &lt;- left_join(salary_analysis, excel_book[[&#39;departmen&#39;]], by = c(&quot;departmen&quot; = &quot;id&quot;), suffix = c(&quot;_emploee&quot;, &quot;_dep&quot;)) # anti join и semi join # сотрудники которые получили штраф и в январе и в феврале semi_join(excel_book[[&#39;payroll_jan&#39;]], excel_book[[&#39;payroll_feb&#39;]], by = &quot;employee_id&quot;) %&gt;% select(employee_id) %&gt;% distinct() %&gt;% left_join(excel_book[[&#39;staff&#39;]], by = c(&quot;employee_id&quot; = &quot;id&quot;)) # сотрудники которые получили штраф в январе но не получили феврале anti_join(excel_book[[&#39;payroll_jan&#39;]], excel_book[[&#39;payroll_feb&#39;]], by = &quot;employee_id&quot;) %&gt;% select(employee_id) %&gt;% distinct() %&gt;% left_join(excel_book[[&#39;staff&#39;]], by = c(&quot;employee_id&quot; = &quot;id&quot;)) # сотрудники которые получили и штраф и бонус в январе semi_join(excel_book[[&#39;payroll_jan&#39;]], excel_book[[&#39;bonus_feb&#39;]], by = &quot;employee_id&quot;) %&gt;% select(employee_id) %&gt;% distinct() %&gt;% left_join(excel_book[[&#39;staff&#39;]], by = c(&quot;employee_id&quot; = &quot;id&quot;)) 7.5 Тест "],["оконные-функции-в-r.html", "Урок 8 Оконные функции в R 8.1 Описание 8.2 Видео 8.3 Материалы 8.4 Код 8.5 Тест", " Урок 8 Оконные функции в R 8.1 Описание Оконные функции по смыслу похожи на агрегирующие, они также получают на вход массив значений и проводят над ними арифметические операции, но в исходящем результате не изменяют количество сток. В этом уроке мы продолжаем изучать пакет dplyr, и функции group_by(), mutate(), а также новые cumsum(), lag(), lead() и arrange(). 8.2 Видео 8.3 Материалы Все материалы к данному уроку можно найти по ссылке. salary_analysis.csv 8.4 Код library(readr) library(dplyr) # загрузка данных salary &lt;- read_csv(&quot;D:\\\\Google Диск\\\\Курс 20 шагов от Excel до языка R\\\\materials\\\\lesson_8\\\\salary_analysis.csv&quot;) # структура таблицы str(salary) # ###################### # Простые оконные функции # ###################### # добавляем суммарную зарплату по отделу salary &lt;- salary %&gt;% group_by(departmen, month) %&gt;% mutate(total_dep = sum(total)) # какой процент зп получает каждый сотрудник в рамках отдела salary &lt;- salary %&gt;% mutate(staff_rate = total / total_dep) # вывести по каждому сотруднику разницу от средней зарплаты по отделу # в рамках месяца salary %&gt;% group_by(departmen, month) %&gt;% mutate(from_dep_avg = total / mean(total)) # ###################### # Ранжирующие оконные функции # ###################### # сотрудники имеющие наибольшую долю от ФОТ своего отдела по месяцам rating_by_dap_rate &lt;- salary %&gt;% group_by(month) %&gt;% mutate(rank = min_rank(staff_rate)) %&gt;% filter(rank == max(rank)) %&gt;% arrange(month) # сотрудники получившие максимальный бонус в рамках каждого месяца salary %&gt;% group_by(month) %&gt;% mutate(rank = dense_rank(bonus)) %&gt;% filter(rank == max(rank)) %&gt;% arrange(month) # сотрудники получившие макисмлаьные бонусы за 2019 год # в по отделам salary %&gt;% filter(grepl(&quot;^2019&quot;, month)) %&gt;% # фильтр по гожу group_by(name_dep, name_emploee) %&gt;% # группировка по отделу и сотруднику summarise(bonus = sum(bonus)) %&gt;% # агрегация данных group_by(name_dep) %&gt;% # создание окна по отделу mutate(max_bonus = max(bonus)) %&gt;% # расчёт максимального бонуса в рамках отдела filter(bonus == max_bonus) # оставляем тех чей бонус равен максимальному # ###################### # Смещающие оконные функции # ###################### # Вывести рост зарплаты каждого сотрудника относительно прошлого месяца salary_grow &lt;- salary %&gt;% arrange(month) %&gt;% # задаём сортировку по месяцам group_by(id) %&gt;% # разбиваем таблицу на окна по сотрудникам mutate(total_grow_rate = ( total - lag(total, order_by = month) ) / total ) # расчёт роста # вывести сотрудников с максимальным ростом зарплат # в каждом месяце salary %&gt;% group_by(id) %&gt;% # разбиваем таблицу на окна по сотрудникам mutate(total_grow_rate = ( total - lag(total, order_by = month) ) / total ) %&gt;% # расчёт роста group_by(month) %&gt;% filter(total_grow_rate == max(total_grow_rate, na.rm = T)) 8.5 Тест "],["пакет-tidyr-преобразование-таблиц-из-широкого-формата-в-длинный-и-наоборот-pivot_longer-pivot_wider.html", "Урок 9 Пакет tidyr: Преобразование таблиц из широкого формата в длинный и наоборот, pivot_longer, pivot_wider 9.1 Описание 9.2 Видео 9.3 Материалы 9.4 Код 9.5 Тест", " Урок 9 Пакет tidyr: Преобразование таблиц из широкого формата в длинный и наоборот, pivot_longer, pivot_wider 9.1 Описание Большинство пользователей Excel используют сводные таблицы, это удобный инструмент с помощью которого вы можете в считанные секунды превратить массив сырых данных в читабельные отчёты. В этом уроке мы разберёмся с тем как вращать таблицы в R, и преобразовывать их из широко формата в длинный и наоборот. Большая часть урока посвящена пакету tidyr и функциям pivot_longer() и pivot_wider(). 9.2 Видео 9.3 Материалы Все материалы к данному уроку можно найти по ссылке. sales.xlsx shop_data_2019.csv shop_data_2020.csv 9.4 Код library(tidyr) library(dplyr) library(readxl) library(readr) # скачиваем файл # скачиваем файл из интернета download.file(&quot;https://github.com/selesnow/r4excel_users/blob/master/lesson_9/sales.xlsx?raw=true&quot;, destfile = &quot;sales.xlsx&quot;, mode = &quot;wb&quot;) # загрузка данных data &lt;- read_excel(&#39;sales.xlsx&#39;, sheet = &#39;data&#39;) # ================== # Задача: сравнить среднемесячные продажи между регионами # в первом квартале 2019 и 2020 года # ================== # заполняем стобец region data &lt;- fill(data, region, .direction = &#39;down&#39;) # приводим таблицу в правильный вид data &lt;- pivot_longer( data, cols = `january 2019`:`march 2020`, names_to = &#39;month&#39;, values_to = &#39;sales&#39;) # разделим столбец month на год и месяц data &lt;- separate(data, col = &#39;month&#39;, into = c(&#39;month&#39;, &#39;year&#39;), remove = TRUE, sep = &quot; &quot;) # финальные рассчёты data &lt;- data %&gt;% filter(month %in% c(&#39;january&#39;, &#39;february&#39;, &#39;march&#39;)) %&gt;% group_by(region, year) %&gt;% summarise(sales = mean(sales)) # расширяем таблицу data %&gt;% pivot_wider(names_from = year, values_from = sales) %&gt;% mutate(grow = (`2020` - `2019`) / `2020` * 100) %&gt;% arrange(desc(grow)) # запишем всё через пайплайны read_excel(&#39;sales.xlsx&#39;, sheet = &#39;data&#39;) %&gt;% fill(region, .direction = &#39;down&#39;) %&gt;% pivot_longer( cols = `january 2019`:`march 2020`, names_to = &#39;month&#39;, values_to = &#39;sales&#39;) %&gt;% separate(col = &#39;month&#39;, into = c(&#39;month&#39;, &#39;year&#39;), remove = TRUE, sep = &quot; &quot;) %&gt;% filter(month %in% c(&#39;january&#39;, &#39;february&#39;, &#39;march&#39;)) %&gt;% group_by(region, year) %&gt;% summarise(sales = mean(sales)) %&gt;% pivot_wider(names_from = year, values_from = sales) %&gt;% mutate(grow = (`2020` - `2019`) / `2020` * 100) %&gt;% arrange(desc(grow)) # ############################### # Спецификации # Задача: посчитать % возвратов от суммы продажи # ############################### shop_data_2019 &lt;- read_delim( &#39;https://raw.githubusercontent.com/selesnow/r4excel_users/master/lesson_9/shop_data_2019.csv&#39;, delim = &#39;;&#39;, locale = locale(decimal_mark = &quot;,&quot;) ) # строим спецификацию wild_spec &lt;- build_wider_spec(shop_data_2019, names_from = &#39;key&#39;, values_from = &#39;value&#39;) # применяем спецификацию pivot_wider_spec(shop_data_2019, spec = wild_spec) %&gt;% mutate(refund_rate = refund / ( sale + upsale )) %&gt;% arrange(desc(refund_rate)) # читаем данные аналогичой структуры shop_data_2020 &lt;- read_delim( &#39;https://raw.githubusercontent.com/selesnow/r4excel_users/master/lesson_9/shop_data_2020.csv&#39;, delim = &#39;;&#39;, locale = locale(decimal_mark = &quot;,&quot;)) # применяем спецификацию shop_data_2020 %&gt;% pivot_wider_spec(spec = wild_spec) %&gt;% mutate(refund_rate = refund / ( sale + upsale )) %&gt;% arrange(desc(refund_rate)) # сохранить спецификацию saveRDS(object = wild_spec, file = &#39;spec.rds&#39;) # загрузить спецификацию new_wild_spec &lt;- readRDS(&#39;spec.rds&#39;) # применяем pivot_wider_spec(shop_data_2019, spec = new_wild_spec) %&gt;% mutate(refund_rate = refund / ( sale + upsale )) %&gt;% arrange(desc(refund_rate)) 9.5 Тест "],["пакет-tidyr-работа-с-вложенными-столбцами-unnest_longer-unnest_wider.html", "Урок 10 Пакет tidyr: Работа с вложенными столбцами, unnest_longer, unnest_wider 10.1 Описание 10.2 Видео 10.3 Материалы 10.4 Код 10.5 Тест", " Урок 10 Пакет tidyr: Работа с вложенными столбцами, unnest_longer, unnest_wider 10.1 Описание JSON и XML являются чрезвычайно популярными форматами хранения и обмена информацией, как правило, за счёт своей компактности. Но анализировать данные представленные в таких форматах сложно, поэтому их перед анализом необходимо привести к табличному виду, именно этому мы и научимся в данном видео. Урок посвящён пакету tidyr, входящему в ядро библиотеки tidyverse, и функциям unnest_longer(), unnest_wider() и hoist(). 10.2 Видео 10.3 Материалы Все материалы к данному уроку можно найти по ссылке. simple.json hard_data.json 10.4 Код library(tidyr) library(dplyr) library(jsonlite) # ################# # задача 1: # имеется json файл со списком сотрудников # 1. необходимо получить сотрудников у которых предусмотренны бонусы # читаем json файл staff_dict &lt;- read_json(&#39;https://raw.githubusercontent.com/selesnow/r4excel_users/master/lesson_10/simple.json&#39;) # преобразуем json в tibble frame staff_dict &lt;- tibble(employee = staff_dict) # 2. посчитать среднюю зарплату по отделам # разворачиваем каждый json узел в виде отдельной строки # фильтруем таблицу оставляя только тех сотрудников у которых есть бонусы staff_dict %&gt;% unnest_wider(employee) %&gt;% filter(bonus &gt; 0) # считаем среднюю зарплату по отделам staff_dict %&gt;% unnest_wider(employee) %&gt;% group_by(department) %&gt;% summarise(average_salary = mean(salary)) # ########################## # задача 3: # имеется json файл со списком сотрудников # вывести список сотрудников с их зоной ответвенности staff_dict &lt;- read_json(&#39;https://raw.githubusercontent.com/selesnow/r4excel_users/master/lesson_10/hard_data.json&#39;) # преобразуем json в tibble frame staff_dict &lt;- tibble(employee = staff_dict) ## вариант решения #1 staff_dict %&gt;% unnest_wider(employee) %&gt;% select(name, department, salary, skills) %&gt;% unnest_wider(skills) %&gt;% select(name, department, salary, practics) %&gt;% unnest_longer(practics) %&gt;% group_by(name, department, salary) %&gt;% summarise(practics = paste(practics, collapse = &quot;, &quot;)) ## вариант решения #2 staff_dict %&gt;% hoist(employee, name = &quot;name&quot;, department = &quot;department&quot;, salary = &quot;salary&quot;, practics = c(&quot;skills&quot;, &quot;practics&quot;)) %&gt;% select(-employee) %&gt;% group_by(name, department, salary) %&gt;% mutate(practics = paste(unlist(practics), collapse = &quot;, &quot;)) # ########################## # задача 4: # имеется json файл со списком сотрудников # поднять на 20% зарплату сотрудникам владеющим языком R staff_dict %&gt;% hoist(employee, name = &quot;name&quot;, salary = &quot;salary&quot;, langs = c(&quot;skills&quot;, &quot;lang&quot;)) %&gt;% select(-employee) %&gt;% unnest_longer(langs) %&gt;% filter(langs == &#39;R&#39;) %&gt;% mutate(new_salary = salary * 1.2) # задача 5: # имеется json файл со списком сотрудников # поднять на 30% зарплату сотрудникам владеющим более чем одним языком программирования staff_dict %&gt;% hoist(employee, name = &quot;name&quot;, salary = &quot;salary&quot;, langs = c(&quot;skills&quot;, &quot;lang&quot;)) %&gt;% select(-employee) %&gt;% group_by(name) %&gt;% unnest_longer(langs) %&gt;% filter( ! is.na(langs) ) %&gt;% group_by( name, salary ) %&gt;% summarise( langs_num = length(langs) ) %&gt;% filter(langs_num &gt; 1) %&gt;% mutate( new_salary = salary * 1.3 ) 10.5 Тест "],["пакет-ggplot2-быстрая-визуализация-данных-с-помощью-ggplot2-и-функции-qplot.html", "Урок 11 Пакет ggplot2: Быстрая визуализация данных с помощью ggplot2 и функции qplot 11.1 Описание 11.2 Видео 11.3 Материалы 11.4 Код 11.5 Тест", " Урок 11 Пакет ggplot2: Быстрая визуализация данных с помощью ggplot2 и функции qplot 11.1 Описание В этом уроке мы начнём знакомство с пакетом ggplot2, который является одним из наиболее популярных средств визуализации данных. Первая функция с которой мы познакомимся - qplot(), позволяет вам максимально быстро, с наименьшим количеством параметров строить различные диаграммы в R. В ходе урока мы построим диаграммы следующих типов: - Столбчатая диаграмма (barplot) - Линейная диаграмма (line chart) - Ящик с усами (boxplot) А так же научимся разбивать наши данные на несколько графиков с помощью аргумента facet. 11.2 Видео 11.3 Материалы Все материалы к данному уроку можно найти по ссылке. sales_data.csv 11.4 Код # install.packages(&#39;ggplot2) library(ggplot2) library(readr) library(dplyr) library(forcats) # чтение данных sales_data &lt;- read_csv2(&#39;https://raw.githubusercontent.com/selesnow/r4excel_users/master/lesson_11/sales_data.csv&#39;) # график количества продаж по месяцам sales_data %&gt;% mutate(month = as.Date(date, &#39;%d.%m.%Y&#39;) %&gt;% format(&#39;%Y-%m&#39;)) %&gt;% group_by(month) %&gt;% count() %&gt;% qplot(data = ., x = month, y = n, fill = &#39;darkcyan&#39;, geom = &#39;col&#39;, main = &#39;Продажи по месяцам&#39;, xlab = &#39;месяц&#39;, ylab = &#39;к-во продаж&#39;) # задаём цвет колонок в зависимости от значений # график количества продаж по месяцам sales_data %&gt;% mutate(month = as.Date(date, &#39;%d.%m.%Y&#39;) %&gt;% format(&#39;%Y-%m&#39;)) %&gt;% group_by(month) %&gt;% count() %&gt;% qplot(data = ., x = month, y = n, fill = n, geom = &#39;col&#39;, main = &#39;Продажи по месяцам&#39;, xlab = &#39;месяц&#39;, ylab = &#39;к-во продаж&#39;) # проанализируем количество продаж по магазинам sales_data %&gt;% mutate(month = as.Date(date, &#39;%d.%m.%Y&#39;) %&gt;% format(&#39;%Y-%m&#39;)) %&gt;% group_by(month, shop) %&gt;% count() %&gt;% qplot(data = ., x = month, y = n, fill = shop, geom = &#39;col&#39;, group = &#39;shop&#39;, main = &#39;Продажи по месяцам&#39;, xlab = &#39;месяц&#39;, ylab = &#39;к-во продаж&#39;) # пример с линейным графиком geom # посмотрим продажи в разрезе менеджеров по месяцам sales_data %&gt;% mutate(month = as.Date(date, &#39;%d.%m.%Y&#39;) %&gt;% format(&#39;%Y-%m&#39;)) %&gt;% group_by(month, manager) %&gt;% summarise(sales = sum(sum)) %&gt;% qplot(data = ., x = month, y = sales, group = manager, colour = manager, geom = c(&#39;line&#39;, &#39;point&#39;), main = &#39;Динамика продаж по менеджерам&#39;, xlab = &#39;месяц&#39;, ylab = &#39;к-во продаж&#39;) # boxplot # проанализирум стоимость проданных ноутбуков по брендам sales_data %&gt;% qplot(data = ., x = brand, y = price - discount, geom = &#39;boxplot&#39;, main = &#39;Анализ продаж по брендам&#39;, xlab = &#39;бренд&#39;, ylab = &#39;цены&#39;) # изменим сортировку брендов sales_data %&gt;% qplot(data = ., x = fct_reorder(.f = brand, .x = price - discount, .fun = median, .desc = T), y = price - discount, geom = &#39;boxplot&#39;, main = &#39;Анализ продаж по брендам&#39;, xlab = &#39;бренд&#39;, ylab = &#39;цены&#39;) # проанализируем скидки по магазинам sales_data %&gt;% filter(discount &gt; 0) %&gt;% mutate(discount_rate = discount / price) %&gt;% qplot(data = ., x = fct_reorder(.f = brand, .x = discount_rate, .fun = median, .desc = T), y = discount_rate, geom = &#39;boxplot&#39;) # разбиваем на несколько графиков sales_data %&gt;% qplot(data = ., x = sum, geom = &#39;histogram&#39;, fill = &#39;darkcyan&#39;, bins = 30, facets = shop~.) # разбиваем график по менеджерам и магазинам sales_data %&gt;% mutate(month = as.Date(date, &#39;%d.%m.%Y&#39;) %&gt;% format(&#39;%Y-%m&#39;)) %&gt;% group_by(month, manager, shop) %&gt;% count() %&gt;% qplot(data = ., x = month, y = n, fill = shop, geom = &#39;col&#39;, group = &#39;shop&#39;, facets = manager~shop, main = &#39;Продажи по месяцам, менеджерам и магазинам&#39;, xlab = &#39;месяц&#39;, ylab = &#39;к-во продаж&#39;) 11.5 Тест "],["пакет-ggplot2-построение-графиков-слой-за-слоем-в-ggplot2.html", "Урок 12 Пакет ggplot2: Построение графиков слой за слоем в ggplot2 12.1 Описание 12.2 Видео 12.3 Материалы 12.4 Код 12.5 Тест", " Урок 12 Пакет ggplot2: Построение графиков слой за слоем в ggplot2 12.1 Описание В этом уроке мы продолжаем изучать пакет ggplot2, предназначенный для построения графиков на языке R. Данное видео поможет вам разобраться в грамматике построения графики, которая лежит в основе ggplot2. Мы разберёмся с основными слоями и эстетиками пакета, и научимся изменять график накладывая на него новые слои. 12.2 Видео 12.3 Материалы Все материалы к данному уроку можно найти по ссылке. sales.csv 12.4 Код library(ggplot2) library(dplyr) library(readr) library(forcats) # чтение данных data &lt;- read_tsv(&#39;https://raw.githubusercontent.com/selesnow/r4excel_users/master/lesson_12/sales.csv&#39;) # структура данных data str(data) # продажи по месяцам, столбчатая диаграмма data %&gt;% mutate(month = format(date, &quot;%Y-%m&quot;)) %&gt;% group_by(month) %&gt;% summarise(transactions = n_distinct(id)) %&gt;% ggplot( aes(x = month, y = transactions) ) + # основной слой geom_col( aes( fill = transactions ), # слой столбцатой диаграммы show.legend = FALSE) + labs(title = &quot;Количество продаж за 2019 год&quot;, # заголовок subtitle = &quot;по месяцам&quot;) + # подзаголовок xlab(&quot;Месяц&quot;) + # подпись X ylab(&quot;Количество продаж&quot;) + # подпись y scale_fill_gradient2(low = &quot;red&quot;, # цвет заливки, минимального значения mid = &quot;gray&quot;, # средние значения midpoint = 81.5, # что считать средним значением high = &quot;limegreen&quot;) # максимальные значения # Динамика продаж по менеджерам # задаём все настройки через главный слой data %&gt;% mutate(month = format(date, &quot;%Y-%m&quot;)) %&gt;% group_by(month, manager_id) %&gt;% summarise(sales_sum = sum(summ)) %&gt;% ggplot( aes(x = month, y = sales_sum, group = manager_id, colour = manager_id) ) + geom_line( size = 0.1 ) + geom_point( size = 1 ) # переносим настройки в отдельные слои data %&gt;% mutate(month = format(date, &quot;%Y-%m&quot;)) %&gt;% group_by(month, manager_id) %&gt;% summarise(sales_sum = sum(summ)) %&gt;% ggplot( aes(x = month, y = sales_sum) ) + geom_line( aes(group = manager_id, colour = manager_id) ) + geom_point( aes(group = manager_id, colour = manager_id) ) # разбиваем на графики data %&gt;% group_by( id, shop ) %&gt;% summarise( count = sum(count) ) %&gt;% ggplot( aes(x = count) ) + geom_histogram(fill = &quot;cyan3&quot;, color = &quot;cyan4&quot;) + facet_grid( ~shop ) # переворачиваем график data %&gt;% group_by(id, manager_id) %&gt;% summarise(transaction_summ = sum(summ)) %&gt;% group_by(manager_id) %&gt;% summarise(avg_summ = mean(transaction_summ)) %&gt;% ggplot( aes(x = fct_reorder(.f = manager_id, .x = avg_summ, .fun = median), y = avg_summ) ) + geom_bar(aes(fill = avg_summ), show.legend = FALSE, stat = &quot;identity&quot;) + coord_flip() + # переворачиваем график scale_fill_gradient(low = &quot;coral1&quot;, high = &quot;limegreen&quot;) + xlab(&quot;Менеджер&quot;) + ylab(&quot;Средний чек&quot;) + labs(title = &quot;Средний чек за 2019 год&quot;, # заголовок subtitle = &quot;по менеджерам&quot;) 12.5 Тест "],["пакет-ggplot2-применение-тем-и-изменение-элементов-графика-в-ggplot2-ggthemes-ggthemr.html", "Урок 13 Пакет ggplot2: Применение тем и изменение элементов графика в ggplot2 (ggthemes, ggthemr) 13.1 Описание 13.2 Видео 13.3 Материалы 13.4 Код 13.5 Тест", " Урок 13 Пакет ggplot2: Применение тем и изменение элементов графика в ggplot2 (ggthemes, ggthemr) 13.1 Описание В этом видео вы научитесь изменять различные элементы графиков построенных с помощью пакета ggplot2, а так же применять к ним готовые темы с помощью пакетов ggthemes и ggthemr. Также в видео разобран процесс добавления аннотаций на график. Шрифты которые можно задавать с помощью аргумент family функции element_text(): sans, serif, mono. 13.2 Видео 13.3 Материалы Все материалы к данному уроку можно найти по ссылке. sales.csv 13.4 Код #install.packages(&#39;devtools&#39;) #devtools::install_github(&#39;cttobin/ggthemr&#39;) library(ggplot2) library(ggthemes) library(ggthemr) library(dplyr) library(readr) # чтение данных data &lt;- read_tsv(&#39;https://raw.githubusercontent.com/selesnow/r4excel_users/master/lesson_13/sales.csv&#39;) # график plot &lt;- # продажи по месяцам, столбчатая диаграмма data %&gt;% mutate(month = format(date, &quot;%Y-%m&quot;)) %&gt;% group_by(month) %&gt;% summarise(transactions = n_distinct(id)) %&gt;% ggplot( aes(x = month, y = transactions) ) + # основной слой geom_col( aes( fill = transactions) ) + # слой столбцатой диаграммы labs(title = &quot;Количество продаж за 2019 год&quot;, # заголовок subtitle = &quot;по месяцам&quot;) + # подзаголовок xlab(&quot;Месяц&quot;) + # подпись X ylab(&quot;Количество продаж&quot;) # подпись y # дабавим анотации plot + annotate(&quot;text&quot;, x = &#39;2019-05&#39;, y = 110, label = &quot;Top Sales&quot;, colour = &quot;red&quot;, size = 4, fontface = &quot;bold&quot;) # применяем готовые темы plot + theme_stata() plot + theme_excel() plot + theme_economist() plot + theme_calc() # темы из пакета ggthemr ggthemr(&#39;flat dark&#39;) plot ggthemr(&#39;flat&#39;) plot ggthemr(&#39;camoflauge&#39;) plot ggthemr(&#39;solarized&#39;) plot ggthemr_reset() # сброс темы # управление элементами дайджеста, слой theme plot + theme( legend.position = &#39;none&#39;, # убираем легенду title = element_text(colour = &#39;royalblue4&#39;, # заголовок face = &#39;bold&#39;), plot.subtitle = element_text(colour = &#39;royalblue3&#39;, # подзаголовок face = &#39;italic&#39;, ), axis.title = element_text(colour = &#39;gray28&#39;, # названия осей face = &#39;bold.italic&#39;), axis.text.y = element_text(face = &#39;italic&#39;, # значения оси y size = 7), axis.text.x = element_text(angle = 90, # поворачиваем подпись X hjust = 1, vjust = 0.5, size = 9), panel.background = element_rect(fill = &#39;skyblue1&#39;), # фон диаграммы panel.border = element_rect(colour = &#39;dodgerblue4&#39;, # обводка диаграммы fill = NA), panel.grid = element_line(color = &quot;skyblue4&quot;, # сетка диаграммы size = 0.1, linetype = &#39;dotted&#39;), plot.background = element_rect(fill = &#39;powderblue&#39;) # общий фон графика ) # сохраняем созданную тему theme_custom_blue &lt;- theme( legend.position = &#39;none&#39;, # убираем легенду title = element_text(colour = &#39;royalblue4&#39;, # заголовок face = &#39;bold&#39;), plot.subtitle = element_text(colour = &#39;royalblue3&#39;, # подзаголовок face = &#39;italic&#39;, ), axis.title = element_text(colour = &#39;gray28&#39;, # названия осей face = &#39;bold.italic&#39;), axis.text.y = element_text(face = &#39;italic&#39;, # значения оси y size = 7), axis.text.x = element_text(angle = 90, # поворачиваем подпись X hjust = 1, vjust = 0.5, size = 9), panel.background = element_rect(fill = &#39;skyblue1&#39;), # фон диаграммы panel.border = element_rect(colour = &#39;dodgerblue4&#39;, # обводка диаграммы fill = NA), panel.grid = element_line(color = &quot;skyblue4&quot;, # сетка диаграммы size = 0.1, linetype = &#39;dotted&#39;), plot.background = element_rect(fill = &#39;powderblue&#39;) # общий фон графика ) # создаём новый график plot2 &lt;- data %&gt;% mutate(month = format(date, &quot;%Y-%m&quot;)) %&gt;% group_by(month, manager_id) %&gt;% summarise(sales_sum = sum(summ)) %&gt;% ggplot( aes(x = month, y = sales_sum, group = manager_id, colour = manager_id) ) + geom_line( size = 1 ) + geom_point( size = 1.7 ) + labs(title = &quot;Продажи за 2019 год&quot;, subtitle = &quot;В разрезе менеджеров&quot;) # применяем созданную тему plot2 + theme_custom_blue 13.5 Тест "],["решение-задач-на-программирование-solutions.html", "Решение задач на программирование (solutions) Урок 6 Урок 7 Урок 8 Урок 9 Урок 10 Урок 11", " Решение задач на программирование (solutions) В этом разделе приведены примеры решений представленных в курсе практических задач. Т.е. данный раздел предназначен для того, что бы вы могли сравнить свои решения с приведёнными тут, или же найти подсказку, если в течении длительного времени у вас не получается решить какую-либо из практических задач. Урок 6 Задание 4 library(dplyr) # создаём набор данных set.seed(50) df &lt;- tibble(col1 = sample(c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), size = 50, replace = TRUE), col2 = rnorm(n = 50, 5, 10), col3 = runif(n = 50, 15, 50), col4 = sample(letters, 50, TRUE), col5 = sample(LETTERS, 50, TRUE)) # решение df %&gt;% group_by(col1) %&gt;% # группируем summarise(avg = mean(col2)) %&gt;% # считаем среднее filter(col1 == &#39;b&#39;) %&gt;% # фильтруем по нужной группе select(avg) # выбираем нужный столбец Урок 7 Задание 3 # код для генерации таблиц library(dplyr) set.seed(50) xdf &lt;- tibble(xkey = sample(c(&quot;a&quot;, &quot;c&quot;, &quot;d&quot;), size = 150, replace = TRUE), count = sample(2:10, 150, TRUE)) ydf &lt;- tibble(xcode = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;), name = c(&quot;banan&quot;, &quot;apple&quot;, &quot;orange&quot;, &quot;kiwi&quot;, &quot;cherry&quot;), price = c(4.3, 2.1, 3.3, 4.7, 3.7)) # решение left_join( xdf, ydf, by = c(&quot;xkey&quot; = &quot;xcode&quot;) ) %&gt;% mutate( sum = count * price ) %&gt;% group_by(name) %&gt;% summarise(total = sum(sum)) %&gt;% filter(name == &quot;kiwi&quot;) Урок 8 Задание 2 library(dplyr) # создаём таблицу с которой будем работать set.seed(50) df &lt;- tibble(step = rep(1:60, 2), group = c(rep(&quot;A&quot;, 60), rep(&quot;B&quot;, 60)), val = round(runif(120, 100, 1000), 0)) %&gt;% arrange(step) # объект в который запишем результат вычислений # нарастающий итог обязательно надо записывать в столбец run res &lt;- df %&gt;% group_by(group) %&gt;% mutate(run = cumsum(val)) # выводим в консоль результат который надо скопировать и вставить в виде ответа res %&gt;% filter( step %in% c(4, 32, 18) &amp; group == &quot;A&quot; | step %in% c(10, 48, 51) &amp; group == &quot;B&quot;) %&gt;% arrange( group, step ) %&gt;% .$run %&gt;% cat Задание 3 library(dplyr) # создаём таблицу с которой будем работать set.seed(50) df &lt;- tibble(step = rep(1:60, 2), group = c(rep(&quot;A&quot;, 60), rep(&quot;B&quot;, 60)), val = round(runif(120, 100, 1000), 0)) %&gt;% arrange(step) # решение df %&gt;% group_by(group) %&gt;% mutate(growth = val - lag(val)) %&gt;% summarise(avg_growth = mean(growth, na.rm=TRUE)) %&gt;% filter(group == &quot;B&quot;) %&gt;% select(avg_growth) Урок 9 Задание 2 library(dplyr) library(tidyr) set.seed(50) df &lt;- tibble(shop = c(&quot;starMarket&quot;, &quot;euroshop&quot;, &quot;wowsales&quot;), jan = runif(3, 10000, 25000), feb = runif(3, 10000, 25000), mar = runif(3, 10000, 25000), apr = runif(3, 10000, 25000), may = runif(3, 10000, 25000), jun = runif(3, 10000, 25000), jul = runif(3, 10000, 25000), aug = runif(3, 10000, 25000), sep = runif(3, 10000, 25000), oct = runif(3, 10000, 25000), nov = runif(3, 10000, 25000), dec = runif(3, 10000, 25000)) # решение df %&gt;% pivot_longer( jan:dec, names_to = &#39;month&#39;, values_to = &quot;sales&quot; ) %&gt;% group_by(shop) %&gt;% summarise(sales = sum(sales)) %&gt;% slice_max(sales) %&gt;% select(shop) Задание 4 library(dplyr) library(tidyr) set.seed(50) df &lt;- tibble(name = c(rep(&#39;Alex&#39;, 3), rep(&#39;John&#39;, 3), rep(&#39;Tom&#39;, 3)), key = rep(c(&quot;sale&quot;, &#39;refund&#39;, &#39;discount&#39;), 3), val = c(runif(1, 1000, 2000), runif(1, 100, 250), runif(1, 50, 150), runif(1, 1000, 2000), runif(1, 100, 250), runif(1, 50, 150), runif(1, 1000, 2000), runif(1, 100, 250), runif(1, 50, 150))) # решение df %&gt;% pivot_wider( names_from = key, values_from = val ) %&gt;% mutate( total_sum = sale - refund - discount ) %&gt;% slice_max(total_sum) %&gt;% select(name, total_sum) Урок 10 Задание 2 library(jsonlite) library(tidyr) library(dplyr) json &lt;- read_json(path = &#39;https://raw.githubusercontent.com/selesnow/r4excel_users/master/test/t10-1.json&#39;) # решение json &lt;- tibble(json = json) json %&gt;% unnest_wider(json) %&gt;% group_by(department) %&gt;% summarise(avgage = mean(age)) %&gt;% filter(department == &quot;IT&quot;) %&gt;% select(avgage) Задание 3 library(jsonlite) library(tidyr) library(dplyr) json &lt;- read_json(path = &#39;https://raw.githubusercontent.com/selesnow/r4excel_users/master/test/t10-2.json&#39;) # решение data &lt;- tibble(data = json) # cредняя площадь магазина data %&gt;% unnest_longer(data) %&gt;% unnest_wider(data) %&gt;% select(square) %&gt;% unlist %&gt;% mean Задание 4 library(jsonlite) library(tidyr) library(dplyr) json &lt;- read_json(path = &#39;https://raw.githubusercontent.com/selesnow/r4excel_users/master/test/t10-2.json&#39;) # решение data &lt;- tibble(data = json) data %&gt;% unnest_longer(data) %&gt;% unnest_wider(data) %&gt;% unnest_longer(schedule) %&gt;% select(data_id, schedule_id, schedule) %&gt;% filter( schedule_id == &#39;sun&#39; &amp; schedule == 0) %&gt;% select(data_id) Задание 5 library(tidyr) library(dplyr) library(readr) library(stringr) data &lt;- read.csv(&quot;https://raw.githubusercontent.com/selesnow/r4excel_users/master/test/production_calendar.csv&quot;) # решение data %&gt;% pivot_longer(January:December, names_to = &quot;month&quot;, values_to = &quot;days&quot;) %&gt;% mutate(days = str_split(days, &quot;,&quot;)) %&gt;% unnest_longer(days) %&gt;% filter( Year %in% c(2005, 2008, 2012, 2017) &amp; str_detect(days, &quot;\\\\*&quot;) ) %&gt;% nrow Урок 11 Задание 2 library(readr) library(ggplot2) library(dplyr) sales_data &lt;- read_csv2(&#39;https://raw.githubusercontent.com/selesnow/r4excel_users/master/lesson_11/sales_data.csv&#39;) # решение sales_data %&gt;% group_by(shop, brand) %&gt;% summarise(count = sum(count)) %&gt;% qplot(data = ., x = brand, y = count, fill = brand, geom = &#39;col&#39;, facets = ~ shop) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
